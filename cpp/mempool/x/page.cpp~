#include <string.h>
#include <iostream>

#include "page.h"

using namespace std;

/*--------------------------------------------------------------------------------*/

//private and will not be used!!!!!!!!!!!!!
MemPage_t::MemPage_t()       //ctor
{}

//private and will not be used!!!!!!!!!!!!!
MemPage_t& MemPage_t::operator=(const MemPage_t& _mem)   //operator= 
{return *this;}

//private and will not be used!!!!!!!!!!!!!
MemPage_t::MemPage_t(const MemPage_t& _mem)
{}
/*--------------------------------------------------------------------------------*/

MemPage_t::MemPage_t(int _capacity)    //ctor
{
	 m_startOfPage = new char[_capacity];
	 
	 m_capacity = _capacity;
	 //m_numOfBytesWriten = 0;
	 //m_curPos = 0;
}

MemPage_t::~MemPage_t()    //dtor
{   		  	
	delete[]((char*)m_startOfPage);
	m_startOfPage = NULL;   
}

/*--------------------------------------------------------------------------------*/	
	
	
bool MemPage_t::write(const void* _dataToWrite, int _len) 
{
	int curPos = getCurPos();	
	if ( curPos + _len > m_capacity){    //if ( m_curPos + _len > m_capacity){
		return false;
	}
	
	writeImp(_dataToWrite, _len, curPos);
	return true;
}

bool MemPage_t::write(const void* _dataToWrite, int _len, int _pos) 
{
	if ( _pos + _len > m_capacity){
		return false;
	}
	
	writeImp(_dataToWrite, _len,_pos);
	return true;
}

void MemPage_t::writeImp(const void* _dataToWrite, int _len, int _pos) 
{
	char* dst = m_startOfPage + _pos;
	
	memcpy(dst, _dataToWrite, _len);

	if( _pos + _len > getCurSize() ){   //if( _pos + _len > m_numOfBytesWriten){
		setCurSize(_pos + _len);  //m_numOfBytesWriten = _pos + _len;
	}
}

/*--------------------------------------------------------------------------------*/	


void* MemPage_t::read(int _len) 
{
	int curPos = getCurPos();	
	if( curPos+ _len > m_capacity){   //if(m_curPos + _len > m_capacity){
		return 0;
	}

	return  readImp(curPos);

}



void* MemPage_t::read(int _len, int _pos) 
{
	if(_pos + _len > m_capacity){
		return 0;
	}

	return  readImp(_pos);
} 


void* MemPage_t::readImp(int _pos) const
{
	void* toRet = m_startOfPage + _pos;
	return toRet;
}

/*--------------------------------------------------------------------------------*/	




















	
	

