#include <string.h>
#include <iostream>

#include "pool.h"

using namespace std;


/*--------------------------------------------------------------------------------*/

//private and will not be used!!!!!!!!!!!!!
MemPool_t& MemPool_t::operator=(const MemPool_t& _mem)   //operator= 
{return *this;}

//private and will not be used!!!!!!!!!!!!!
MemPool_t::MemPool_t(const MemPool_t& _mem)
{}

/*--------------------------------------------------------------------------------*/

MemPool_t::MemPool_t()    //ctor
{
	//m_pagesCapacity = DEFAULT_INITIAL_PAGE_CAPACITY;	
	PageCreate();
}

/*
MemPool_t::MemPool_t(int _pagesCapacity)    //ctor
{
	//m_pagesCapacity = _pagesCapacity;	 
	PageCreate();
}
*/

MemPage_t* MemPool_t::PageCreate()  //create first page in list
{
	//MemPage_t* page = new MemPage_t(m_pagesCapacity);
	MemPage_t* page = new MemPage_t();
	
	m_pages.push_back(page);

	return page;
}

/*--------------------------------------------------------------------------------*/

MemPool_t::~MemPool_t()    //dtor
{   		  	
	while (!m_pages.empty())
    {
		delete m_pages.front();
		m_pages.pop_front();
    } 
}

/*--------------------------------------------------------------------------------*/

MemPage_t* MemPool_t::GetPageOfPos(int _pos ,int* _posCounter)
{
	MemPage_t* memPage =0;
	bool wasPageFound = false;
	int pageCapacity;

	list<MemPage_t*>::iterator it;
	for(it = m_pages.begin(); it != m_pages.end() ; it++){ //go through list of pages
		memPage = *it;
		pageCapacity =  memPage->getCapacity();
		if(*_posCounter + pageCapacity <= _pos){ //advance to next page in pool 
			*_posCounter += pageCapacity;
		}else{
			wasPageFound = true;
			break;
		}
	}	
	
	if(!wasPageFound){
		memPage = 0;
	}

	return memPage;
}

/*--------------------------------------------------------------------------------*/	

void MemPool_t::writeRec(const void* _dataToWrite, int _lenLeftToWrite ,  int _lenWriten , MemPage_t* _pageToWrtTo )
{
	MemPage_t* nextPage = NULL;	
	int capacity = _pageToWrtTo->getCapacity();
	int lenToWrite = (capacity > _lenLeftToWrite) ? _lenLeftToWrite : capacity ; 

	_pageToWrtTo->write(_dataToWrite + _lenWriten , lenToWrite, 0);
	
	_lenWriten += lenToWrite;
	_lenLeftToWrite -= lenToWrite;

	if(_lenLeftToWrite > 0){
		nextPage = getNextPageToWriteTo(_pageToWrtTo);
		writeRec( _dataToWrite , _lenLeftToWrite ,  _lenWriten , nextPage );  //rec
	}
	
}



bool MemPool_t::write(const void* _dataToWrite, int _len) 
{
	int posCounter = 0;		
	int pagePosToWrite;
	int pageCapacity;
	int curPos = getCurPos();	
	MemPage_t* memPage=0;
	
	memPage = GetPageOfPos(curPos, &posCounter);   // posCounter= position of page start
		
	if(!memPage){   //need to create new page 
		memPage = PageCreate();
	}
		
	pageCapacity = memPage->getCapacity();
	pagePosToWrite  =  curPos - posCounter;  //will be 0 if new page was created                          
	
	if(pagePosToWrite + _len > pageCapacity ){  //check if there is enough space on this page
		//write on this page and on the next
		int bytesToWrtCurPage = pageCapacity - pagePosToWrite;		
		memPage->write(_dataToWrite, bytesToWrtCurPage, pagePosToWrite);  //write on cur page
		int bytesToWrtNxtPage = _len - bytesToWrtCurPage;;			
		//write to next pages recursively
		memPage = getNextPageToWriteTo(memPage);
		writeRec( _dataToWrite , bytesToWrtNxtPage ,  bytesToWrtCurPage , memPage );  //rec		
	}else{  //enough space on this page
		memPage->write(_dataToWrite , _len, pagePosToWrite);
	} 

	int curSize = getCurSize();
	if ( curSize < curPos + _len){	
		setCurSize( curPos + _len );  // set new size
	}	

	setCurPos(curPos + _len );  // set new pos
	
	return true;
}




bool MemPool_t::write(const void* _dataToWrite, int _len, int _pos) 
{
	if( _pos <= getCurSize() ) {
		setCurPos(_pos);
		write(_dataToWrite, _len); 
		return true;
	}else{
		return false;
	}	
}


/*--------------------------------------------------------------------------------*/	

void MemPool_t::readRec(void* _dataToRead, int _lenLeftToRead ,  int _lenWasRead , MemPage_t* _pageToReadFrom )
{
	MemPage_t* nextPage = NULL;	
	void* buff = NULL;
	int capacity = _pageToReadFrom->getCapacity();
	int lenToRead = (capacity > _lenLeftToRead) ? _lenLeftToRead : capacity ; 
	
	buff = new char[_lenLeftToRead]; 
	_pageToReadFrom->read(buff, lenToRead, 0);
	memcpy(_dataToRead + _lenWasRead, buff, lenToRead);
	
	_lenWasRead += lenToRead;
	_lenLeftToRead -= lenToRead;

	if(_lenLeftToRead > 0){
		nextPage = getNextPage(_pageToReadFrom);
		readRec( _dataToRead , _lenLeftToRead ,  _lenWasRead , nextPage );  //rec
	}

	delete[] buff;
	
}


bool MemPool_t::read(void* _dataToRead, int _len )  
{
	read(_dataToRead,  _len, getCurPos() ) ;
	return true; 
}


bool MemPool_t::read(void* _dataToRead, int _len, int _pos) 
{
	int posCounter = 0;	
	int pageCapacity;	
	int pagePosToRead;
	int lenLeftToread = _len;	
	MemPage_t* memPage =0;
	void* buff = 0;	
	
	//check if read from legal position 
	if( _pos + _len > getCurSize() ){
		return false;
	}

	buff = new char[_len]; 
	memPage = GetPageOfPos(_pos, &posCounter);   // posCounter= position of page start
	
	if(memPage){	//will always be true because pos is legal - protection 
		pageCapacity = memPage->getCapacity();
		pagePosToRead  =  _pos - posCounter;                           
			
		if(pagePosToRead + _len > pageCapacity ){  //check to see if there is enough space on this page	
			int bytesToReadCurPage = pageCapacity - pagePosToRead;
			int bytesToReadNxtPage = lenLeftToread - bytesToReadCurPage;
			//read from cur page	
			memPage->read(buff, bytesToReadCurPage, pagePosToRead);
			memcpy(_dataToRead  , buff , bytesToReadCurPage);
	 		//read from next pages recursively
			memPage = getNextPage(memPage);
			readRec(_dataToRead, bytesToReadNxtPage,  bytesToReadCurPage , memPage );				
		}else{  //all data to read is on this page
			memPage->read(_dataToRead + (_len - lenLeftToread), lenLeftToread, pagePosToRead);
		} 
		
	}
	
	setCurPos(_pos + _len );  // set new pos
	
	delete[] buff; 
		
	return true;
	
} 

/*--------------------------------------------------------------------------------*/	

MemPage_t* MemPool_t::getNextPageToWriteTo(MemPage_t* _memPage)
{
	list<MemPage_t*>::iterator it = m_pages.begin();
	
	for(; *it !=_memPage ; it++);

	it++;

	if(it == m_pages.end())  {
		return PageCreate();
	}else{
		return *it;
	}
}



MemPage_t* MemPool_t::getNextPage(MemPage_t* _memPage){
	list<MemPage_t*>::iterator it = m_pages.begin();
	
	for(; *it !=_memPage ; it++);

	return *(++it); 
}


/*--------------------------------------------------------------------------------*/	









	
	

